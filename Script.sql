/*Criação do banco de dados*/
CREATE DATABASE IF NOT EXISTS ACADEMIA;
USE ACADEMIA;

/*Tabela de benefícios*/
CREATE TABLE BENEFICIO (
  BEN_INT_ID INT UNSIGNED NOT NULL AUTO_INCREMENT,
  BEN_STR_NOME VARCHAR(30) NOT NULL,
  BEN_STR_DESC VARCHAR(500),
  PRIMARY KEY (BEN_INT_ID)
);

/*Tabela de estados*/
CREATE TABLE ESTADO (
  EST_INT_ID INT UNSIGNED NOT NULL AUTO_INCREMENT,
  EST_STR_DESC VARCHAR(50) NOT NULL,
  EST_STR_SIGLA CHAR(2) NOT NULL UNIQUE,
  PRIMARY KEY (EST_INT_ID)
);

/*Tabela de cidades*/
CREATE TABLE CIDADE (
  CID_INT_ID INT UNSIGNED NOT NULL AUTO_INCREMENT,
  EST_INT_ID INT UNSIGNED NOT NULL,
  CID_STR_DESCRICAO VARCHAR(50) NOT NULL,
  PRIMARY KEY (CID_INT_ID),
  FOREIGN KEY (EST_INT_ID)
    REFERENCES ESTADO (EST_INT_ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);

/*Tabela de endereços*/
CREATE TABLE ENDERECO (
  END_INT_ID INT UNSIGNED NOT NULL AUTO_INCREMENT,
  CID_INT_ID INT UNSIGNED NOT NULL,
  END_STR_LOGRADOURO VARCHAR(70) NOT NULL,
  END_STR_NUMERO CHAR(5) NOT NULL,
  END_STR_COMPLEMENTO VARCHAR(70),
  END_STR_BAIRRO VARCHAR(50) NOT NULL,
  END_STR_CEP CHAR(8) NOT NULL,
  PRIMARY KEY (END_INT_ID),
  FOREIGN KEY (CID_INT_ID)
    REFERENCES CIDADE (CID_INT_ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);

/*Tabela de clientes*/
CREATE TABLE CLIENTE (
  CLI_INT_ID INT UNSIGNED NOT NULL AUTO_INCREMENT,
  END_INT_ID INT UNSIGNED,
  CLI_STR_NOME VARCHAR(70) NOT NULL,
  CLI_STR_SENHA VARCHAR(50) NOT NULL,
  CLI_STR_CPF CHAR(11) NOT NULL UNIQUE,
  CLI_STR_EMAIL VARCHAR(70) NOT NULL UNIQUE,
  CLI_STR_TELEFONE CHAR(11) NOT NULL,
  PRIMARY KEY (CLI_INT_ID),
  FOREIGN KEY (END_INT_ID)
    REFERENCES ENDERECO (END_INT_ID)
    ON DELETE SET NULL
    ON UPDATE CASCADE
);

/*Tabela de planos*/
CREATE TABLE PLANO (
  PLA_INT_ID INT UNSIGNED NOT NULL AUTO_INCREMENT,
  PLA_STR_NOME VARCHAR(20) NOT NULL,
  PLA_STR_PRECO DECIMAL(5, 2) NOT NULL,
  PLA_STR_DESC VARCHAR(500),
  PLA_STR_DURACAO VARCHAR(30) NOT NULL,
  PRIMARY KEY (PLA_INT_ID)
);

/*Inserir planos iniciais*/
INSERT INTO PLANO (PLA_STR_NOME, PLA_STR_PRECO, PLA_STR_DESC, PLA_STR_DURACAO)
VALUES
('Básico', 50.00, 'Treino inteligente e treinos em casa', 'Mensal'),
('Plus', 80.00, 'PRO Gyms, treino inteligente e treinos em casa', 'Mensal'),
('Black', 120.00, 'ELITE Gyms & Classes, PRO Gyms, treino inteligente e treinos em casa', 'Mensal');

/*Tabela de assinaturas */
CREATE TABLE ASSINATURA (
  ASS_INT_ID INT UNSIGNED NOT NULL AUTO_INCREMENT,
  CLI_INT_ID INT UNSIGNED NOT NULL,
  PLA_INT_ID INT UNSIGNED NOT NULL,
  ASS_STR_DATA_INICIO DATE NOT NULL,
  ASS_STR_DATA_FIM DATE,
  ASS_STR_STATUS ENUM('Ativo', 'Cancelado', 'Pendente') NOT NULL DEFAULT 'Pendente',
  PRIMARY KEY (ASS_INT_ID),
  FOREIGN KEY (CLI_INT_ID)
    REFERENCES CLIENTE (CLI_INT_ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  FOREIGN KEY (PLA_INT_ID)
    REFERENCES PLANO (PLA_INT_ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);

/*Tabela de avaliações*/
CREATE TABLE AVALIACAO (
   AVA_INT_ID INT UNSIGNED NOT NULL AUTO_INCREMENT,
   CLI_INT_ID INT UNSIGNED NOT NULL,
   AVA_STR_ESTRELA CHAR(1) NOT NULL CHECK (AVA_STR_ESTRELA IN ('1', '2', '3', '4', '5')),
   AVA_STR_DESC VARCHAR(500),
   AVA_STR_DATA DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
   PRIMARY KEY (AVA_INT_ID),
   FOREIGN KEY (CLI_INT_ID)
     REFERENCES CLIENTE (CLI_INT_ID)
     ON DELETE CASCADE
     ON UPDATE CASCADE
);


/*Tabela de benefícios vinculados aos planos*/
CREATE TABLE PLANO_BENEFICIO (
  PB_INT_ID INT UNSIGNED NOT NULL AUTO_INCREMENT,
  BEN_INT_ID INT UNSIGNED NOT NULL,
  PLA_INT_ID INT UNSIGNED NOT NULL,
  PRIMARY KEY (PB_INT_ID),
  FOREIGN KEY (BEN_INT_ID)
    REFERENCES BENEFICIO (BEN_INT_ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  FOREIGN KEY (PLA_INT_ID)
    REFERENCES PLANO (PLA_INT_ID)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  UNIQUE KEY uk_plano_beneficio (BEN_INT_ID, PLA_INT_ID)
);

/* CRUD */
/* CLIENTE */
DELIMITER $$

CREATE PROCEDURE SP_CREATE_CLIENTE(
    IN P_NOME VARCHAR(70),
    IN P_EMAIL VARCHAR(70),
    IN P_SENHA VARCHAR(50),
    IN P_CPF CHAR(11),
    IN P_TELEFONE CHAR(11),
    IN P_ENDERECO_ID INT
)
BEGIN
    DECLARE CLI_ID INT;

    -- Inserir cliente
    INSERT INTO CLIENTE (CLI_STR_NOME, CLI_STR_EMAIL, CLI_STR_SENHA, CLI_STR_CPF, CLI_STR_TELEFONE, END_INT_ID)
    VALUES (P_NOME, P_EMAIL, P_SENHA, P_CPF, P_TELEFONE, P_ENDERECO_ID);

    -- Obter ID do cliente inserido
    SET CLI_ID = LAST_INSERT_ID();

    -- Retornar o ID do cliente
    SELECT CLI_ID AS CLI_INT_ID;
END $$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE SP_DELETE_CLIENTE(
    IN P_CLIENTE_ID INT
)
BEGIN
    DELETE FROM CLIENTE WHERE CLI_INT_ID = P_CLIENTE_ID;
END $$

DELIMITER ;
DELIMITER $$

CREATE PROCEDURE SP_GET_ALL_CLIENTES()
BEGIN
    SELECT * FROM CLIENTE;
END $$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE SP_GET_CLIENTE_BY_ID(
    IN P_CLIENTE_ID INT
)
BEGIN
    SELECT * FROM CLIENTE WHERE CLI_INT_ID = P_CLIENTE_ID;
END $$

DELIMITER ;

/* ENDEREÇO */

DELIMITER $$

CREATE PROCEDURE SP_CREATE_ENDERECO(
    IN P_LOGRADOURO VARCHAR(70),
    IN P_NUMERO CHAR(5),
    IN P_COMPLEMENTO VARCHAR(70),
    IN P_BAIRRO VARCHAR(50),
    IN P_CEP CHAR(8),
    IN P_CIDADE_ID INT
)
BEGIN
    DECLARE END_ID INT;

    INSERT INTO ENDERECO (END_STR_LOGRADOURO, END_STR_NUMERO, END_STR_COMPLEMENTO, END_STR_BAIRRO, END_STR_CEP, CID_INT_ID)
    VALUES (P_LOGRADOURO, P_NUMERO, P_COMPLEMENTO, P_BAIRRO, P_CEP, P_CIDADE_ID);

    SET END_ID = LAST_INSERT_ID();

    SELECT END_ID AS END_INT_ID;
END $$

DELIMITER ;


DELIMITER $$

CREATE PROCEDURE SP_CREATE_ASSINATURA(
    IN P_CLIENTE_ID INT,
    IN P_PLANO_ID INT,
    IN P_DATA_INICIO DATE,
    IN P_STATUS ENUM('ATIVO', 'CANCELADO', 'PENDENTE')
)
BEGIN
    INSERT INTO ASSINATURA (CLI_INT_ID, PLA_INT_ID, ASS_STR_DATA_INICIO, ASS_STR_STATUS)
    VALUES (P_CLIENTE_ID, P_PLANO_ID, P_DATA_INICIO, P_STATUS);
END $$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE SP_UPDATE_ASSINATURA(
    IN P_ASSINATURA_ID INT,
    IN P_STATUS ENUM('ATIVO', 'CANCELADO', 'PENDENTE'),
    IN P_DATA_FIM DATE
)
BEGIN
    UPDATE ASSINATURA
    SET ASS_STR_STATUS = P_STATUS, ASS_STR_DATA_FIM = P_DATA_FIM
    WHERE ASS_INT_ID = P_ASSINATURA_ID;
END $$

DELIMITER ;
DELIMITER $$

CREATE PROCEDURE SP_UPDATE_CLIENTE (
    IN P_ID INT,
    IN P_NOME VARCHAR(70),
    IN P_EMAIL VARCHAR(70),
    IN P_TELEFONE CHAR(11)
)
BEGIN
    -- Atualiza os dados do cliente com base no ID
    UPDATE CLIENTE
    SET 
        CLI_STR_NOME = P_NOME,
        CLI_STR_EMAIL = P_EMAIL,
        CLI_STR_TELEFONE = P_TELEFONE
    WHERE CLI_INT_ID = P_ID;

    -- Verifique se a atualização foi feita (opcional)
    SELECT ROW_COUNT() AS rows_affected;
END$$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE SP_GET_PLANOS()
BEGIN
    SELECT * FROM PLANO;
END $$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE SP_GET_BENEFICIOS_BY_PLANO(
    IN P_PLANO_ID INT
)
BEGIN
    SELECT B.BEN_STR_NOME, B.BEN_STR_DESC
    FROM PLANO_BENEFICIO PB
    JOIN BENEFICIO B ON PB.BEN_INT_ID = B.BEN_INT_ID
    WHERE PB.PLA_INT_ID = P_PLANO_ID;
END $$

DELIMITER ;

DELIMITER $$

CREATE PROCEDURE SP_CREATE_ESTADO (
    IN P_EST_DESC VARCHAR(50),
    IN P_EST_SIGLA CHAR(2)
)
BEGIN
    DECLARE EST_ID INT;

    SELECT EST_INT_ID INTO EST_ID
    FROM ESTADO
    WHERE EST_STR_SIGLA = P_EST_SIGLA;

    IF EST_ID IS NULL THEN
        INSERT INTO ESTADO (EST_STR_DESC, EST_STR_SIGLA)
        VALUES (P_EST_DESC, P_EST_SIGLA);
        SET EST_ID = LAST_INSERT_ID();
    END IF;

    SELECT EST_ID AS EST_INT_ID;
END $$

DELIMITER ;


DELIMITER $$

CREATE PROCEDURE SP_CREATE_CIDADE(
    IN P_CIDADE_NOME VARCHAR(50),
    IN P_ESTADO_ID INT
)
BEGIN
    DECLARE CID_ID INT;

    -- Verificar se a cidade já existe
    SELECT CID_INT_ID INTO CID_ID
    FROM CIDADE
    WHERE CID_STR_DESCRICAO = P_CIDADE_NOME AND EST_INT_ID = P_ESTADO_ID
    LIMIT 1;

    -- Se não existir, insira a nova cidade
    IF CID_ID IS NULL THEN
        INSERT INTO CIDADE (CID_STR_DESCRICAO, EST_INT_ID)
        VALUES (P_CIDADE_NOME, P_ESTADO_ID);
        SET CID_ID = LAST_INSERT_ID();
    END IF;

    -- Retornar o ID da cidade
    SELECT CID_ID AS CID_INT_ID;
END $$

DELIMITER ;

DELIMITER //

CREATE PROCEDURE SP_UPDATE_ENDERECO(
    IN P_ENDERECO_ID INT,
    IN P_LOGRADOURO VARCHAR(255),
    IN P_NUMERO VARCHAR(10),
    IN P_COMPLEMENTO VARCHAR(50),
    IN P_BAIRRO VARCHAR(50),
    IN P_CEP VARCHAR(10),
    IN P_CIDADE_ID INT
)
BEGIN
    UPDATE ENDERECO
    SET 
        END_STR_LOGRADOURO = P_LOGRADOURO,
        END_STR_NUMERO = P_NUMERO,
        END_STR_COMPLEMENTO = P_COMPLEMENTO,
        END_STR_BAIRRO = P_BAIRRO,
        END_STR_CEP = P_CEP,
        CID_INT_ID = P_CIDADE_ID
    WHERE END_INT_ID = P_ENDERECO_ID;
END //

DELIMITER ;

INSERT INTO ESTADO (EST_INT_ID, EST_STR_DESC, EST_STR_SIGLA) VALUES
(1, 'Acre', 'AC'),
(2, 'Alagoas', 'AL'),
(3, 'Amapá', 'AP'),
(4, 'Amazonas', 'AM'),
(5, 'Bahia', 'BA'),
(6, 'Ceará', 'CE'),
(7, 'Distrito Federal', 'DF'),
(8, 'Espírito Santo', 'ES'),
(9, 'Goiás', 'GO'),
(10, 'Maranhão', 'MA'),
(11, 'Mato Grosso', 'MT'),
(12, 'Mato Grosso do Sul', 'MS'),
(13, 'Minas Gerais', 'MG'),
(14, 'Pará', 'PA'),
(15, 'Paraíba', 'PB'),
(16, 'Paraná', 'PR'),
(17, 'Pernambuco', 'PE'),
(18, 'Piauí', 'PI'),
(19, 'Rio de Janeiro', 'RJ'),
(20, 'Rio Grande do Norte', 'RN'),
(21, 'Rio Grande do Sul', 'RS'),
(22, 'Rondônia', 'RO'),
(23, 'Roraima', 'RR'),
(24, 'Santa Catarina', 'SC'),
(25, 'São Paulo', 'SP'),
(26, 'Sergipe', 'SE'),
(27, 'Tocantins', 'TO');

REPLACE INTO CIDADE (CID_INT_ID, EST_INT_ID, CID_STR_DESCRICAO) VALUES
(1, 1, 'Rio Branco'),
(2, 2, 'Maceió'),
(3, 3, 'Macapá'),
(4, 4, 'Manaus'),
(5, 5, 'Salvador'),
(6, 6, 'Fortaleza'),
(7, 7, 'Brasília'),
(8, 8, 'Vitória'),
(9, 9, 'Goiânia'),
(10, 10, 'São Luís'),
(11, 11, 'Cuiabá'),
(12, 12, 'Campo Grande'),
(13, 13, 'Belo Horizonte'),
(14, 14, 'Belém'),
(15, 15, 'João Pessoa'),
(16, 16, 'Curitiba'),
(17, 17, 'Recife'),
(18, 18, 'Teresina'),
(19, 19, 'Rio de Janeiro'),
(20, 20, 'Natal'),
(21, 21, 'Porto Alegre'),
(22, 22, 'Porto Velho'),
(23, 23, 'Boa Vista'),
(24, 24, 'Florianópolis'),
(25, 25, 'São Paulo'),
(26, 26, 'Aracaju'),
(27, 27, 'Palmas');


SELECT*FROM ENDERECO WHERE END_INT_ID = 3;
SELECT*FROM CLIENTE 
SELECT*FROM ESTADO;
SELECT * FROM CIDADE;

/*
SET FOREIGN_KEY_CHECKS = 0;
TRUNCATE TABLE CLIENTE;
SET FOREIGN_KEY_CHECKS = 1;
*/


